generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") 
  directUrl = env("DIRECT_URL")
}

model User {
  id              String          @id @default(uuid())
  name            String
  email           String          @unique
  role            String
  books           Book[]          @relation("UserBooks")
  loans           Loan[]          
  reviews         Review[]        
  reservations    Reservation[]  
  requestedBooks  RequestedBook[]
}

model Book {
  id              String          @id @default(uuid())
  isbn            String          @unique
  cCode           String
  title           String
  author          String
  publishing      String
  amount          Int
  available       Boolean         @default(true)
  user            User?           @relation("UserBooks", fields: [userId], references: [id])
  userId          String?
  loans           Loan[]
  reviews         Review[]
  reservations    Reservation[]  
  requests        RequestedBook[]
}

model Loan {
  id        String     @id @default(uuid())
  bookId    String
  userId    String
  loanDate  DateTime   @default(now())
  returnDue DateTime
  returned  Boolean    @default(false)

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model Review {
  id      String     @id @default(uuid())
  content String
  userId  String
  bookId  String

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Reservation {
  id          String     @id @default(uuid())
  bookId      String
  userId      String
  requestDate DateTime   @default(now())

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model RequestedBook {
  id          String     @id @default(uuid())
  title       String
  author      String
  userId      String
  requestDate DateTime   @default(now())

  user User   @relation(fields: [userId], references: [id])
  book Book?  @relation(fields: [bookId], references: [id])
  bookId String?
}
